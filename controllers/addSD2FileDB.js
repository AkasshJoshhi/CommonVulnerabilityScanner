var fs = require('fs');
var {spawn,exec} = require('child_process');

var fd = require('../config/config').execPaths.finddomain;
var httprobe1 = require('../config/config').execPaths.httprobe;
var jsonDbFilePath = require('../config/config').database.dbFilePath; 

async function enumSD(updatedDataObj,domainName,jsonDbFilePath){
    var bashProcess = spawn(fd,["-t",domainName,"-o"]);
    var subd_filename = './'+domainName+'.txt';
    bashProcess.stdout.setEncoding("utf8");

    bashProcess.stdout.on("data", data => {
        // console.log(data);
    });

    bashProcess.stdout.on("end",  async(data) => {
      try {
        // var assetsSubdFilename = projecPath+'assets/'+domainName+'.txt';

        // spawn("mv",[subd_filename,projecPath]);  
        var fileData = fs.readFileSync(subd_filename,'utf-8');
        var arrayOfSubd = await convertFile2Array(updatedDataObj,fileData,domainName,jsonDbFilePath,subd_filename,domainName);
        
        return arrayOfSubd;
    }
      catch(e){
        console.log('Catch an error: ', e)
      }
              
    });
}

async function httprobe(subd_filename,updatedDataObj,domainName){
 // var bashProcess = spawn(`cat`,[`${subd_filename} |`,'httprobe']);
  exec(`cat ${subd_filename} | ${httprobe1}`, (error, stdout, stderr) => {
    if (error) {
        console.log(`error: ${error.message}`);
        return 0;
    }
    if (stderr) {
        console.log(`stderr: ${stderr}`);
        return 0;
    }
     var res =[]; 
     res=stdout.split('\n');
     res.pop();
    console.log(`Probed SubDomains: ${res}`);
     res.forEach(element => {
       
      updatedDataObj.subd.probedSubd[`${domainName}`].push(element);
    });
    fs.writeFileSync(jsonDbFilePath,JSON.stringify(updatedDataObj), 'utf-8');
      console.log(updatedDataObj)

});

}

 async function convertFile2Array(updatedDataObj,subDomainArray,domainName,jsonDbFilePath,subd_filename,domainName){
  try{
    
    var resultArray = subDomainArray.toString().split("\n");
    resultArray.pop();
    updatedDataObj.subd.enumSubd[`${domainName}`]=resultArray;
    console.log(updatedDataObj);
    await writeUpdate2Original(updatedDataObj,jsonDbFilePath,subd_filename,domainName);
    return resultArray;
  }
  catch(e){
    console.log(e.message)
  }
}
async function appendNewData(updatedDataObj,domainName,jsonDbFilePath){
  try{  
    var subDomainArray = await enumSD(updatedDataObj,domainName,jsonDbFilePath);
    console.log("---> addingSD2FileDB");

  }
  catch(e){
    console.log(e.message);
  }
}
async function writeUpdate2Original(updatedDataObj,jsonDbFilePath,subd_filename,domainName){
     fs.writeFileSync(jsonDbFilePath,JSON.stringify(updatedDataObj), 'utf-8');
     httprobe(subd_filename,updatedDataObj,domainName);
     //console.log(probed);
}


module.exports = async function addSD2FileDB(dbData,domainName){
  var jsonDbFilePath = require('../config/config').database.dbFilePath; 

  try{
    var updatedDataObj={...dbData};

    await appendNewData(updatedDataObj,domainName,jsonDbFilePath);
  }
  catch(e){
    console.log(e.message)
  }
};
